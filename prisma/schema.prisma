generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model users {
  id            String        @id(map: "users_pk") @db.VarChar
  username      String?       @db.VarChar
  name          String?       @db.VarChar
  email         String?       @db.VarChar
  password_hash String?       @db.VarChar
  perm_flag     Int?
  created_at    String?       @db.VarChar
  updated_at    String?       @db.VarChar
  services_flag Int           @default(0)
  deck_folder   deck_folder[]
  deck_saves    deck_saves[]
  decks         decks[]
  logins        logins[]
  services      services[]
  tables        tables[]
  tasks         tasks[]
}

model blacklisted_tokens {
  token            String  @id(map: "blacklisted_tokens_pk") @db.VarChar
  logout_timestamp BigInt?
}

model table_contents {
  id       String  @id(map: "table_contents_pk") @db.VarChar
  table_id String? @db.VarChar
  location String? @db.VarChar
  content  String? @db.VarChar
  tables   tables? @relation(fields: [table_id], references: [id], onDelete: Cascade, map: "table_contents_tables_columns_fk")
}

model tables {
  id             String           @id(map: "id") @db.VarChar
  user_id        String?          @db.VarChar
  name           String?          @db.VarChar
  type           String?          @db.VarChar
  rows           Int?
  columns        Int?
  created_at     String?          @db.VarChar
  table_contents table_contents[]
  users          users?           @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "tables_users_username_fk")
}

model services {
  id         String   @id(map: "services_pk") @db.VarChar
  name       String?  @db.VarChar
  alias      String?  @db.VarChar
  enabled    Boolean?
  type       String?  @db.VarChar
  toggleable Boolean?
  updated_by String?  @db.VarChar
  updated_at String?  @db.VarChar
  users      users?   @relation(fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "updated_by_fk")
}

model logins {
  user_id    String? @db.VarChar
  created_at String  @db.VarChar
  generator  String  @db.VarChar
  id         String  @id(map: "logins_pk") @db.VarChar
  success    Boolean
  reason     String? @db.VarChar
  users      users?  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "logins_fk")
}

model tasks {
  id                    String             @id(map: "tasks_pk") @db.VarChar
  name                  String             @db.VarChar
  repeat_period         String             @db.VarChar
  date_time             Boolean
  day                   String?            @db.VarChar
  hour                  Int?
  minute                Int?
  week_of_repeat_period String?            @db.VarChar
  user_id               String             @db.VarChar
  created_at            String             @db.VarChar
  pinned                Boolean            @default(false)
  task_completions      task_completions[]
  users                 users              @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "tasks_users_id_fk")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model task_completions {
  id           String @id(map: "task_completions_pk") @db.VarChar
  task_id      String @db.VarChar
  completed_at Int
  tasks        tasks  @relation(fields: [task_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "task_completions_tasks_id_fk")
}

model card {
  id         String @id(map: "card_pk") @db.VarChar
  front      String @db.VarChar
  back       String @db.VarChar
  deck       String @db.VarChar
  created_at String @db.VarChar
  updated_at String @db.VarChar
  decks      decks  @relation(fields: [deck], references: [id], onDelete: Cascade, map: "card_decks_id_fk")
}

model deck_folder {
  id         String       @id(map: "deck_folder_pk") @db.VarChar
  name       String?      @db.VarChar
  user       String?      @db.VarChar
  created_at String?      @db.VarChar
  updated_at Int?
  users      users?       @relation(fields: [user], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "deck_folder_users_id_fk")
  deck_saves deck_saves[]
}

model decks {
  id          String       @id(map: "decks_pk") @db.VarChar
  name        String       @db.VarChar
  topic       String?      @db.VarChar
  visibility  String       @db.VarChar
  description String       @db.VarChar
  score       Int          @default(0)
  creator     String       @db.VarChar
  created_at  String       @db.VarChar
  updated_at  String       @db.VarChar
  card        card[]
  deck_saves  deck_saves[]
  users       users        @relation(fields: [creator], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "decks_users_id_fk")
  tags        tags[]
}

model note {
  user       String  @db.VarChar
  card       String  @db.VarChar
  content    String  @db.VarChar
  updated_at String? @db.VarChar

  @@id([user, card], map: "note_pk")
}

model tags {
  id    String  @id(map: "tags_pk") @db.VarChar
  name  String  @db.VarChar
  deck  String? @db.VarChar
  decks decks?  @relation(fields: [deck], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "tags___fk")
}

model vote {
  user       String @db.VarChar
  deck       String @db.VarChar
  score      String @db.VarChar
  updated_at String @db.VarChar

  @@id([user, deck], map: "vote_pk")
}

model deck_saves {
  folder      String      @db.VarChar
  deck        String      @db.VarChar
  user        String      @db.VarChar
  users       users       @relation(fields: [user], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "deck_saves_____fk")
  decks       decks       @relation(fields: [deck], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "deck_saves____fk")
  deck_folder deck_folder @relation(fields: [folder], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "deck_saves___fk")

  @@id([deck, user, folder], map: "deck_saves_pk")
}
